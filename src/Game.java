
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;

public class Game extends javax.swing.JFrame {
private static String playerName;
private static int Funds, cardsRem = 52, dScore = 0, pScore = 0;
Deck DeckInPlay = new Deck();
Point dorigin = new Point(50, 65), porigin = new Point(50, 45);;

    public Game(String profile, int Chips) {
        initComponents();
        jButtonReplay.setVisible(false);
        jLabelResult.setVisible(false);
        playerName = profile;
        Funds = Chips;
        DrawSlider();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelGame = new javax.swing.JPanel();
        jButtonHit = new javax.swing.JButton();
        jButtonStick = new javax.swing.JButton();
        jlabelplayer = new javax.swing.JLabel();
        jButtonReplay = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jLabelBlackjack = new javax.swing.JLabel();
        jLabelBlackjack1 = new javax.swing.JLabel();
        jLayeredPaneDC = new javax.swing.JLayeredPane();
        jlabelhouse = new javax.swing.JLabel();
        jlabelChipCount = new javax.swing.JLabel();
        jlabelBet = new javax.swing.JLabel();
        jLabelPlaceBet = new javax.swing.JLabel();
        jSliderBet = new javax.swing.JSlider();
        jButtonPlaceBet = new javax.swing.JButton();
        jLayeredPanePC = new javax.swing.JLayeredPane();
        jLabelResult = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
        setSize(new java.awt.Dimension(1920, 1080));

        jpanelGame.setBackground(new java.awt.Color(80, 102, 0));
        jpanelGame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpanelGame.setMaximumSize(new java.awt.Dimension(1920, 1080));
        jpanelGame.setPreferredSize(new java.awt.Dimension(1920, 1080));
        jpanelGame.setRequestFocusEnabled(false);

        jButtonHit.setFont(new java.awt.Font("Trebuchet MS", 0, 24)); // NOI18N
        jButtonHit.setText("Hit");
        jButtonHit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHitActionPerformed(evt);
            }
        });

        jButtonStick.setFont(new java.awt.Font("Trebuchet MS", 0, 24)); // NOI18N
        jButtonStick.setText("Stick");
        jButtonStick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStickActionPerformed(evt);
            }
        });

        jlabelplayer.setFont(new java.awt.Font("Trebuchet MS", 0, 36)); // NOI18N
        jlabelplayer.setText("Player Score:");

        jButtonReplay.setFont(new java.awt.Font("Trebuchet MS", 0, 30)); // NOI18N
        jButtonReplay.setText("Deal Hand");
        jButtonReplay.setToolTipText("");
        jButtonReplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReplayActionPerformed(evt);
            }
        });

        jButtonExit.setFont(new java.awt.Font("Trebuchet MS", 0, 30)); // NOI18N
        jButtonExit.setText("Exit to Menu");
        jButtonExit.setToolTipText("");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabelBlackjack.setFont(new java.awt.Font("Trajan Pro", 1, 52)); // NOI18N
        jLabelBlackjack.setForeground(new java.awt.Color(255, 255, 0));
        jLabelBlackjack.setText("Blackjack pays 3 to 2");
        jLabelBlackjack.setToolTipText("");

        jLabelBlackjack1.setFont(new java.awt.Font("Trajan Pro", 1, 32)); // NOI18N
        jLabelBlackjack1.setText("Dealer Must Draw to Soft 17");
        jLabelBlackjack1.setToolTipText("");

        jLayeredPaneDC.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 5, true));

        javax.swing.GroupLayout jLayeredPaneDCLayout = new javax.swing.GroupLayout(jLayeredPaneDC);
        jLayeredPaneDC.setLayout(jLayeredPaneDCLayout);
        jLayeredPaneDCLayout.setHorizontalGroup(
            jLayeredPaneDCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 942, Short.MAX_VALUE)
        );
        jLayeredPaneDCLayout.setVerticalGroup(
            jLayeredPaneDCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );

        jlabelhouse.setFont(new java.awt.Font("Trebuchet MS", 0, 36)); // NOI18N
        jlabelhouse.setText("House Score:");

        jlabelChipCount.setFont(new java.awt.Font("Trebuchet MS", 0, 30)); // NOI18N
        jlabelChipCount.setText("Remaining Chips:");

        jlabelBet.setFont(new java.awt.Font("Trebuchet MS", 0, 30)); // NOI18N
        jlabelBet.setText("Player Bet:");

        jLabelPlaceBet.setFont(new java.awt.Font("Verdana", 0, 30)); // NOI18N
        jLabelPlaceBet.setLabelFor(jSliderBet);
        jLabelPlaceBet.setText("Place Your Bet Using the Slider");

        jSliderBet.setBackground(new java.awt.Color(80, 120, 0));
        jSliderBet.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jSliderBet.setForeground(new java.awt.Color(0, 0, 0));
        jSliderBet.setMajorTickSpacing(100);
        jSliderBet.setMaximum(Funds);
        jSliderBet.setMinorTickSpacing(25);
        jSliderBet.setPaintLabels(true);
        jSliderBet.setPaintTicks(true);
        jSliderBet.setSnapToTicks(true);
        jSliderBet.setToolTipText("");
        jSliderBet.setValue(25);
        jSliderBet.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        jSliderBet.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jButtonPlaceBet.setFont(new java.awt.Font("Trebuchet MS", 0, 30)); // NOI18N
        jButtonPlaceBet.setText("Bet");
        jButtonPlaceBet.setToolTipText("");
        jButtonPlaceBet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaceBetActionPerformed(evt);
            }
        });

        jLayeredPanePC.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 5, true));
        jLayeredPanePC.setPreferredSize(new java.awt.Dimension(1105, 310));

        javax.swing.GroupLayout jLayeredPanePCLayout = new javax.swing.GroupLayout(jLayeredPanePC);
        jLayeredPanePC.setLayout(jLayeredPanePCLayout);
        jLayeredPanePCLayout.setHorizontalGroup(
            jLayeredPanePCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 962, Short.MAX_VALUE)
        );
        jLayeredPanePCLayout.setVerticalGroup(
            jLayeredPanePCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jLabelResult.setFont(new java.awt.Font("Trajan Pro", 3, 48)); // NOI18N
        jLabelResult.setToolTipText("");

        javax.swing.GroupLayout jpanelGameLayout = new javax.swing.GroupLayout(jpanelGame);
        jpanelGame.setLayout(jpanelGameLayout);
        jpanelGameLayout.setHorizontalGroup(
            jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelGameLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSliderBet, javax.swing.GroupLayout.PREFERRED_SIZE, 1880, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpanelGameLayout.createSequentialGroup()
                        .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanelGameLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlabelhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonPlaceBet, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(128, 128, 128)
                                .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLayeredPanePC, javax.swing.GroupLayout.PREFERRED_SIZE, 972, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLayeredPaneDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabelPlaceBet, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(jLabelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jpanelGameLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlabelplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpanelGameLayout.createSequentialGroup()
                        .addComponent(jButtonHit, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonStick, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpanelGameLayout.createSequentialGroup()
                        .addComponent(jButtonReplay)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonExit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelBlackjack, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpanelGameLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabelBlackjack1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(131, 131, 131)))
                .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelGameLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jlabelBet, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlabelChipCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        jpanelGameLayout.setVerticalGroup(
            jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelGameLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jSliderBet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelGameLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabelPlaceBet, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonPlaceBet, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145)
                        .addComponent(jlabelhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonReplay, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpanelGameLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLayeredPaneDC)
                            .addComponent(jLabelResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanelGameLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jlabelBet, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jlabelChipCount, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpanelGameLayout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabelBlackjack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelBlackjack1)
                                .addGap(0, 32, Short.MAX_VALUE)))
                        .addGap(47, 47, 47)))
                .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelGameLayout.createSequentialGroup()
                        .addComponent(jLayeredPanePC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))
                    .addGroup(jpanelGameLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jlabelplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                        .addGroup(jpanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonHit, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonStick, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpanelGame, javax.swing.GroupLayout.DEFAULT_SIZE, 1958, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jpanelGame, javax.swing.GroupLayout.DEFAULT_SIZE, 1088, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DrawSlider(){
      jSliderBet.setMaximum(Funds);
      int num, cycle = 0;
      Hashtable sliderLabels = new Hashtable();
      // Following IF statement customises the bettiung experience depending on chip count
        if (Funds > 2000 && Funds < 5000)
                {
                    jSliderBet.setMinorTickSpacing(100);
                    jSliderBet.setMajorTickSpacing(500);
                    // Customising slider labels - https://docs.oracle.com/javase/tutorial/uiswing/components/slider.html
                        for(num = Funds/100; num >= 0; num--){
                            sliderLabels.put( new Integer( cycle ), new JLabel("" + cycle) );
                            cycle += 100;
                        }
                        jSliderBet.setLabelTable( sliderLabels );
                }
                else if (Funds > 4999 && Funds < 10000)
                {
                    jSliderBet.setMinorTickSpacing(250);
                    jSliderBet.setMajorTickSpacing(1000);
                        for(num = Funds/250; num >= 0; num--){
                            sliderLabels.put( new Integer( cycle ), new JLabel("" + cycle) );
                            cycle += 250;
                        }
                    jSliderBet.setLabelTable( sliderLabels );
                }
                else if (Funds > 9999 && Funds < 25000)
                {
                    jSliderBet.setMinorTickSpacing(500);
                    jSliderBet.setMajorTickSpacing(2500);
                        for(num = Funds/500; num >= 0; num--){
                            sliderLabels.put( new Integer( cycle ), new JLabel("" + cycle) );
                            cycle += 500;
                        }
                    jSliderBet.setLabelTable( sliderLabels );
                }
                else if (Funds > 24999 && Funds < 50000)
                {
                    jSliderBet.setMinorTickSpacing(1000);
                    jSliderBet.setMajorTickSpacing(5000);
                        for(num = Funds/1000; num >= 0; num--){
                            sliderLabels.put( new Integer( cycle ), new JLabel("" + cycle) );
                            cycle += 1000;
                        }
                    jSliderBet.setLabelTable( sliderLabels );
                }
                else if (Funds > 49999)
                {
                    jSliderBet.setMinorTickSpacing(2500);
                    jSliderBet.setMajorTickSpacing(10000);
                        for(num = Funds/2500; num >= 0; num--){
                            sliderLabels.put( new Integer( cycle ), new JLabel("" + cycle) );
                            cycle += 2500;
                        }
                    jSliderBet.setLabelTable( sliderLabels );
                }
                else {
                    // keeps it default
                }
        
        
        
    }
    
    
    private void jButtonReplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReplayActionPerformed
        dScore = 0;
        pScore = 0;
        cardsRem = 52;
        new Game(playerName, Funds).setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_jButtonReplayActionPerformed

    private void jButtonPlaceBetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaceBetActionPerformed
        double slider = jSliderBet.getValue();
        int bet = (int)slider;

            Funds = Funds - bet;
            jlabelBet.setText("Player Bet: " + bet);
            jlabelChipCount.setText("Remaining Chips: " + Funds);
        
        // Tidying up UI    
            jSliderBet.setVisible(false);
            jLabelPlaceBet.setVisible(false);
            jButtonPlaceBet.setVisible(false);
            
        if(bet == 0)
            jButtonReplay.setVisible(false);
        // End of Tidying
        else{
        DealCards();
        }
    }//GEN-LAST:event_jButtonPlaceBetActionPerformed

  // Saving Chip Count upon quit-------------------------------------------------------------
    private void AttemptSave() throws IOException{
        String[] names = new String[50];
        ArrayList<Player> players = new ArrayList<>();
        try {
            players = LoadProfiles();
        } 
        catch (FileNotFoundException e) {}
        catch (IOException | ClassNotFoundException e) {}
        
        for (int y = 0; y < players.size(); y++) {
                String content = "<html>" + players.get(y).GetUser() + "<br>";
                if(content.equals(playerName)){
                    players.get(y).SetChipCount(Funds);
                }
        }
        
        SaveProfiles(players);
    }  
    
    public static ArrayList<Player> LoadProfiles() throws FileNotFoundException, IOException, ClassNotFoundException{
		FileInputStream fis = new FileInputStream("profiles.txt");
		ObjectInputStream ois = new ObjectInputStream(fis);
		ArrayList<Player> playerList = (ArrayList<Player>) ois.readObject();
		ois.close();
		
		return playerList;
	}
    
    public static void SaveProfiles(ArrayList<Player> profiles) throws IOException{
	
        for(int i = 0; i < profiles.size(); i++){
            FileOutputStream fos = new FileOutputStream("profiles.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(profiles);
            oos.close();
        }
    }
//-----------------------------------------------------------------------------------------------------    
    
    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
    try {    
        AttemptSave();
    } catch (IOException ex) {}
        new MainWindow().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonExitActionPerformed

    
    private void jButtonStickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStickActionPerformed
        jButtonHit.setVisible(false);
        jButtonStick.setVisible(false);
        
        int count, i = 3, xoffset =0, yoffset=0;  
        String pos, filename;
     
        while(dScore < 17 && i < 5){
			
            count = ((int)(Math.random() * cardsRem)); // issues random number for card selection
            pos = DeckInPlay.DealCard(count); // get card from deck
            dScore += DeckInPlay.IssueValue(count);
            filename = GetImage(pos);
            
            switch(i){
                case 3: {xoffset = 55; yoffset = -50; break;}
                case 4: {xoffset = 55; yoffset = -50; break;}
                default: break;
            }
            Delay();
            jlabelhouse.setText("House Scores " + dScore);
            DisplayDCard(filename, i, xoffset, yoffset);
            DeckInPlay.RemoveCard(count);	
            cardsRem--;
            i++;
            
            if(dScore > 21){
		break;
            }
                     
        }
        Results();
        jButtonReplay.setVisible(true);
        
    }//GEN-LAST:event_jButtonStickActionPerformed

    
    private void jButtonHitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHitActionPerformed
        int count, i = 4, xoffset =0, yoffset=0;  
        String pos, filename;
     
        if(pScore < 21 && i < 7){
			
            count = ((int)(Math.random() * cardsRem)); // issues random number for card selection
            pos = DeckInPlay.DealCard(count); // get card from deck
            pScore += DeckInPlay.IssueValue(count);
            filename = GetImage(pos);
            
            switch(i){
                case 4: {xoffset = 55; yoffset = -50; break;}
                case 5: {xoffset = 55; yoffset = -50; break;}
                default: break;
            }
            Delay();
            jlabelplayer.setText("Player Scores " + pScore);
            DisplayPCard(filename, i, xoffset, yoffset);
            DeckInPlay.RemoveCard(count);	
            cardsRem--;
            i++;                    
        }
        
        if(pScore > 21){
        jButtonHit.setVisible(false);
        jButtonStick.setVisible(false);
            Results();
        jButtonReplay.setVisible(true);
        }
    }//GEN-LAST:event_jButtonHitActionPerformed

    private void Delay(){
    // Provide a delay so it acts like thinkin about move
    // https://stackoverflow.com/questions/12767367/how-could-i-add-a-simple-delay-in-a-java-swing-application
    Timer timer = new Timer(1500, new ActionListener() {
        
        @Override
        public void actionPerformed(ActionEvent ae) {

        }
    }
    );
            timer.setRepeats(false);
            timer.setInitialDelay(100);
            timer.start(); 
    } 
    
    private void Results(){
    String message, bet;
    int num;
    bet = jlabelBet.getText().substring(12);
    num = Integer.parseInt(bet);
    
    if(pScore > 21){
    message = "<html> Player Bust! <br><br> House Wins";
    jlabelChipCount.setText("Remaining Chips: " + Funds);
    }
    else if(pScore == 21 && dScore != 21){
    message = "<html> BLACKJACK! <br><br> Player Wins"; 
    Funds = Funds + (int)(num * 2.5);
    jlabelChipCount.setText("Remaining Chips: " + Funds);
    }
    else if(pScore <= 21 && dScore > 21){
    message = "<html> House Bust! <br><br> Player Wins";
    Funds = Funds + (num * 2);
    jlabelChipCount.setText("Remaining Chips: " + Funds);
    }
    else if(pScore <= 21 && pScore > dScore){
    message = "<html> Player Wins";
    Funds = Funds + (num * 2);
    jlabelChipCount.setText("Remaining Chips: " + Funds);
    }
    else{
    message = "<html> House Wins";
    }
        jLabelResult.setText(message);
        jLabelResult.setVisible(true);
    } // Provide Results
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game(playerName, Funds).setVisible(true);
                
            }
        });  
    }
    
    private String GetImage(String x){
        String file = "";
        
        switch(x){
        //----------------------Aces-------------------------------------
                case "AC": { file = "Images/deck/clubs/AC.png"; break; }
                case "AS": { file = "Images/deck/spades/AS.png"; break; }
                case "AH": { file = "Images/deck/hearts/AH.png"; break; }
                case "AD": { file = "Images/deck/diamonds/AD.png"; break; }
                //----------------------Twos-------------------------------------
                case "2C": { file = "Images/deck/clubs/2C.png"; break; }
                case "2S": { file = "Images/deck/spades/2S.png"; break; }
                case "2H": { file = "Images/deck/hearts/2H.png"; break; }
                case "2D": { file = "Images/deck/diamonds/2D.png"; break; }
                //----------------------Threes-------------------------------------
                case "3C": { file = "Images/deck/clubs/3C.png"; break; }
                case "3S": { file = "Images/deck/spades/3S.png"; break; }
                case "3H": { file = "Images/deck/hearts/3H.png"; break; }
                case "3D": { file = "Images/deck/diamonds/3D.png"; break; }
                //----------------------Fours-------------------------------------
                case "4C": { file = "Images/deck/clubs/4C.png"; break; }
                case "4S": { file = "Images/deck/spades/4S.png"; break; }
                case "4H": { file = "Images/deck/hearts/4H.png"; break; }
                case "4D": { file = "Images/deck/diamonds/4D.png"; break; }
                //----------------------Fives-------------------------------------
                case "5C": { file = "Images/deck/clubs/5C.png"; break; }
                case "5S": { file = "Images/deck/spades/5S.png"; break; }
                case "5H": { file = "Images/deck/hearts/5H.png"; break; }
                case "5D": { file = "Images/deck/diamonds/5D.png"; break; }
                //----------------------Sixes-------------------------------------
                case "6C": { file = "Images/deck/clubs/6C.png"; break; }
                case "6S": { file = "Images/deck/spades/6S.png"; break; }
                case "6H": { file = "Images/deck/hearts/6H.png"; break; }
                case "6D": { file = "Images/deck/diamonds/6D.png"; break; }
                //----------------------Sevens-------------------------------------
                case "7C": { file = "Images/deck/clubs/7C.png"; break; }
                case "7S": { file = "Images/deck/spades/7S.png"; break; }
                case "7H": { file = "Images/deck/hearts/7H.png"; break; }
                case "7D": { file = "Images/deck/diamonds/7D.png"; break; }
                //----------------------Eights-------------------------------------
                case "8C": { file = "Images/deck/clubs/8C.png"; break; }
                case "8S": { file = "Images/deck/spades/8S.png"; break; }
                case "8H": { file = "Images/deck/hearts/8H.png"; break; }
                case "8D": { file = "Images/deck/diamonds/8D.png"; break; }
                //----------------------Nines-------------------------------------
                case "9C": { file = "Images/deck/clubs/9C.png"; break; }
                case "9S": { file = "Images/deck/spades/9S.png"; break; }
                case "9H": { file = "Images/deck/hearts/9H.png"; break; }
                case "9D": { file = "Images/deck/diamonds/9D.png"; break; }
                //----------------------Tens-------------------------------------
                case "10C": { file = "Images/deck/clubs/10C.png"; break; }
                case "10S": { file = "Images/deck/spades/10S.png"; break; }
                case "10H": { file = "Images/deck/hearts/10H.png"; break; }
                case "10D": { file = "Images/deck/diamonds/10D.png"; break; }
                //----------------------Jacks-------------------------------------
                case "JC": { file = "Images/deck/clubs/JC.png"; break; }
                case "JS": { file = "Images/deck/spades/JS.png"; break; }
                case "JH": { file = "Images/deck/hearts/JH.png"; break; }
                case "JD": { file = "Images/deck/diamonds/JD.png"; break; }
                //----------------------Queens-------------------------------------
                case "QC": { file = "Images/deck/clubs/QC.png"; break; }
                case "QS": { file = "Images/deck/spades/QS.png"; break; }
                case "QH": { file = "Images/deck/hearts/QH.png"; break; }
                case "QD": { file = "Images/deck/diamonds/QD.png"; break; }
                //----------------------Kings-------------------------------------
                case "KC": { file = "Images/deck/clubs/KC.png"; break; }
                case "KS": { file = "Images/deck/spades/KS.png"; break; }
                case "KH": { file = "Images/deck/hearts/KH.png"; break; }
                case "KD": { file = "Images/deck/diamonds/KD.png"; break; }

                default: { break; }         
        }
        
        return file;
    }
    
    private void DisplayDCard(String file, int i, int dxoffset, int dyoffset){
             
            ImageIcon card = new ImageIcon(file);
            JLabel label = new JLabel(card);
            label.setBounds(dorigin.x, dorigin.y, 450, 250);
        
            jLayeredPaneDC.add(label, new Integer(i));
            dorigin.x += dxoffset;
            dorigin.y -= dyoffset; 

    }
    
    private void DisplayPCard(String file, int i, int pxoffset, int pyoffset){

            ImageIcon card = new ImageIcon(file);
            JLabel label = new JLabel(card);
            label.setBounds(porigin.x, porigin.y, 450, 300);
        
            jLayeredPanePC.add(label, new Integer(i));
            porigin.x += pxoffset;
            porigin.y -= pyoffset;
    }
    
    private void DealCards(){
    
    int count = 0, place;
    String pos, filename;

     do{
        place = ((int)(Math.random() * cardsRem));
        pos = DeckInPlay.DealCard(place); // get card from deck
        filename = GetImage(pos);
        
        // Assign Card to Dealer
        if(count == 0|| count == 2){
            //This is the offset for computing the origin for the next label.
            int dxoffset = 55;
            int dyoffset = 40;
            dScore += DeckInPlay.IssueValue(place);
            DisplayDCard(filename,count, dxoffset, dyoffset);
        }
        
        // Assign Card to Player
        else{
            int pxoffset = 55;
            int pyoffset = 40;
            pScore += DeckInPlay.IssueValue(place);
            DisplayPCard(filename,count, pxoffset, pyoffset);
        }
        
        DeckInPlay.RemoveCard(place);
        count++;
        cardsRem--;
        }while(count < 4);

        jlabelhouse.setText("House Scores " + dScore);
        jlabelplayer.setText("Player Scores " + pScore);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonHit;
    private javax.swing.JButton jButtonPlaceBet;
    private javax.swing.JButton jButtonReplay;
    private javax.swing.JButton jButtonStick;
    private javax.swing.JLabel jLabelBlackjack;
    private javax.swing.JLabel jLabelBlackjack1;
    private javax.swing.JLabel jLabelPlaceBet;
    private javax.swing.JLabel jLabelResult;
    private javax.swing.JLayeredPane jLayeredPaneDC;
    private javax.swing.JLayeredPane jLayeredPanePC;
    private javax.swing.JSlider jSliderBet;
    private javax.swing.JLabel jlabelBet;
    private javax.swing.JLabel jlabelChipCount;
    private javax.swing.JLabel jlabelhouse;
    private javax.swing.JLabel jlabelplayer;
    private javax.swing.JPanel jpanelGame;
    // End of variables declaration//GEN-END:variables
}
